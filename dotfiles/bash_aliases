# alias to update bash alias
alias ea='vim $HOME/.config/home-manager/dotfiles/bash_aliases; home-manager switch; source $HOME/.bashrc && source $HOME/.bashrc && echo "aliases sourced  --ok."'

#*** TOKENS ***#
export GH_TOKEN='source $HOME/.secrets/gh-token'

#*** VARIABLES ***#
export TODAY=$(date +%Y-%m-%d)
export REAL_NAME='christine'
export WORK_NAME='cpukrops'
export SHORT_NAME='capuk'
export USERNAME=$SHORT_NAME
export CURRENT_KEY="$HOME/.ssh/capuk-personal"
export BEEPER_PATH="$HOME/.$REAL_NAME/app-images/beeper-latest.AppImage"
export NIXPKGS_ALLOW_UNFREE=1

#*** PATHS ***#
export PATH="/usr/sbin/:$PATH"
export PATH="$HOME/.$REAL_NAME/bin-scripts/i3-scripts/:$PATH"
export PATH="$HOME/.$REAL_NAME/app-images:$PATH"
export PATH=$HOME/.local/bin:$PATH
export PATH="/usr/local/bin/hugo:$PATH"
export C_INCLUDE_PATH=/usr/local/include
export EDITOR=vim

#*** WORK ***#
if [[ "$USERNAME" == "$WORK_NAME" ]]; then
 source "$HOME/.config/home-manager/dotfiles/bash_aliases_work"
fi

#*** PERSONAL ***#
# custom navigation
alias macmini='ssh capuk@capuk-mac.local -i $HOME/.ssh/capuk-personal'
alias christine='cd $HOME/.$REAL_NAME && ls -la'
alias hm='cd $HOME/.config/home-manager'
alias gg='cd $HOME/.$REAL_NAME/git'
alias ggc='cd $HOME/.$REAL_NAME/git/$SHORT_NAME'
alias ggm='cd $HOME/.$REAL_NAME/git/main'
alias ggs='cd $HOME/.$REAL_NAME/git/$SHORT_NAME/salt'
alias gga='cd $HOME/.$REAL_NAME/ansible'

# servers
alias web='ssh -i $HOME/.ssh/capuk-personal root@nextcloud.christinepuk.net'

# update custom aplications
alias update-joplin='wget -O - https://raw.githubusercontent.com/laurent22/joplin/dev/Joplin_install_and_update.sh | bash'
#alias update-beeper="pkill beeper; wget -O $BEEPER_PATH 'https://download.beeper.com/linux/appImage/x64' && chmod +x $BEEPER_PATH && sudo rm /usr/local/bin/beeper && sudo ln $BEEPER_PATH /usr/local/bin/beeper"
alias update-beeper="pkill beeper; wget -O $BEEPER_PATH 'https://api.beeper.com/desktop/download/linux/x64/stable/com.automattic.beeper.desktop' && chmod +x $BEEPER_PATH && sudo rm /usr/local/bin/beeper && sudo ln $BEEPER_PATH /usr/local/bin/beeper"
alias update-rambox='pkill rambox; sudo snap refresh rambox'
alias code='GTK_THEME=Raleigh /snap/bin/code &'
alias beeper='GTK_THEME=Raleigh /usr/local/bin/beeper &'
alias nautilus='GTK_THEME=Raleigh /usr/bin/nautilus &'

# screens
alias dp1="bash /$HOME/.$REAL_NAME/bin-scripts/i3-scripts/dp1.sh"
alias dp2="bash /$HOME/.$REAL_NAME/bin-scripts/i3-scripts/dp2.sh"
alias dp3="bash /$HOME/.$REAL_NAME/bin-scripts/i3-scripts/dp3.sh"
alias laptop1="bash /$HOME/.$REAL_NAME/bin-scripts/i3-scripts/edp1.sh"
alias laptop2="bash /$HOME/.$REAL_NAME/bin-scripts/i3-scripts/edp2.sh"
alias two="bash /$HOME/.$REAL_NAME/bin-scripts/i3-scripts/two.sh"


#*** UNIX TOOLS ***#
#shortcuts
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
alias convert-webp-png='parallel dwebp {} -o {.}.png ::: *.webp'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -lisad --color'
alias le='less'
alias ..='cd ..;'
alias ls="ls -G"
alias woman="man"
alias g='grep'
alias math='expr'

# less
export LESS_TERMCAP_mb=$'\E[6m'          # begin blinking
export LESS_TERMCAP_md=$'\E[34m'         # begin bold
export LESS_TERMCAP_us=$'\E[4;32m'       # begin underline
export LESS_TERMCAP_so=$'\E[1;33;41m'    # begin standout-mode - info box
export LESS_TERMCAP_me=$'\E[0m'          # end mode
export LESS_TERMCAP_ue=$'\E[0m'          # end underline
export LESS_TERMCAP_se=$'\E[0m'          # end standout-mode
export LESS='-iR -j4 --shift 5 -P ?n?f%f .?m(file %i of %m) ..?ltlines %lt-%lb?L/%L. :byte %bB?s/%s. .?e(END) ?x- Next\: %x.:?pB%pB\%..%t'

# cd
function cd {
    # actually change the directory with all args passed to the function
    builtin cd "$@"
    if [[ "$PWD/" = $HOME/.$REAL_NAME/git/$SHORT_NAME/dc-deploy-toolkit ]]; then
        exec /usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1 & 
    fi
}

# reset bash
alias br='source $HOME/.bashrc'

#*** SRE TOOLS ***#
# tmuxer
alias tmuxer="bash $HOME/.$REAL_NAME/git/main/tmuxer/tmuxer"
alias ggt='cd $HOME/.$REAL_NAME/tmuxer'
alias tmuxa='tmux attach'

# vagrant 
alias vssh='vagrant ssh'

# pssh 
alias pssh='/usr/bin/parallel-ssh'

# terraform
alias terrafom='/$HOME/bin/terraform'
alias tf='/$HOME/bin/terraform'

# python
#alias py-venv='python3 -m venv venv && source venv/bin/activate'
#export WORKON_HOME=${HOME}/.$REAL_NAME/python/virtualenvs
#export PROJECT_HOME=${HOME}/.$REAL_NAME/python/projects

# pyenv
#export PYENV_ROOT="/$HOME/.pyenv"
#command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
#eval "$(pyenv init -)"

# docker linter
function docker-linter {
     sudo docker run --rm -i hadolint/hadolint < $1
}

# git - check out a pr
function gpr() {
      git fetch upstream pull/$1/head:STAGING-A-PR
      git checkout STAGING-A-PR
}

# git - update remote origin and switch to master
alias git-update-upstream='echo "checking out origin/master"; git checkout master; echo "getting new upstreams"; git fetch upstream; echo "rebasing"; git rebase upstream/master; echo "pushing up to origin/master"; git push origin; git branch  -D STAGING-A-PR'
alias git-update-main='echo "checking out origin/master"; git checkout main; echo "getting new upstreams"; git fetch upstream; echo "rebasing"; git rebase upstream/main; echo "pushing up to origin/master"; git push origin; git branch  -D STAGING-A-PR'
alias git-rebase-upstream='echo "getting new upstreams"; git fetch upstream; echo "rebasing"; git rebase upstream/master'

# direnv
eval "$(direnv hook bash)"

#*** CUSTOM FUNCTIONS ***#
# ascii 
alias asciicast2gif='sudo docker run --rm -v $PWD:/data asciinema/asciicast2gif'

# shrink pdf size
alias shrink-pdf='bash $HOME/.$REAL_NAME/bin-scripts/shrink-pdf.sh' $1

# find white space in a file
function white-space {
     grep -r '[[:blank:]]$' $1
}

# date from today
datefromtoday() {
  days=$1
  date +%F -d "+$days days"
}

# verify keys
alias verify-rsa-key='bash /$HOME/.$REAL_NAME/bin-scripts/verify-rsa-key.sh'

# manage keys
alias add-ssh='ssh-add $CURRENT_KEY'
alias pubkey='cat $CURRENT_KEY.pub'
alias add-secrets='source $HOME/.secrets/*'
eval $(keychain --eval $CURRENT_KEY);


#*** CUSTOM TERMINAL ***#
# ps1
export PS1="\[\e[44m\]\`parse_git_branch\`\[\e[m\] \[\e[34m\]\W\[\e[m\] \[\e[35m\]\\$\[\e[m\] "

# git status in ps1
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}
# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}
